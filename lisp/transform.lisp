(in-package :delta-vega)


(defclass regression (vega-object)
  ((regression
     :accessor regression
     :initarg :regression
     :type string
     :documentation "The data field of the dependent variable to predict.")
   (on
     :accessor on
     :initarg :on
     :type string
     :documentation "The data field of the independent variable to use a predictor.")
   (groupby
     :accessor groupby
     :initarg :groupby
     :type (or (vector string *) list)
     :documentation "The data fields to group by. If not specified, a single group containing all data objects will be used.")
   (method
     :accessor method
     :initarg :method
     :type (member :linear :log :exp :pow :quad :poly)
     :documentation "The functional form of the regression model. One of :linear, :log, :exp, :pow, :quad, or :poly")
   (order
     :accessor order
     :initarg :order
     :type integer
     :documentation "The polynomial order (number of coefficients) for the ‘poly’ method.")
   (extent
     :accessor extent
     :initarg :extent
     :type (or (vector integer *) list)
     :documentation "A [min, max] domain over the independent (x) field for the starting and ending points of the generated trend line.")
   (params
     :accessor params
     :initarg :params
     :type boolean
     :documentation "A boolean flag indicating if the transform should return the regression model parameters (one object per group), rather than trend line points. The resulting objects include a coef array of fitted coefficient values (starting with the intercept term and then including terms of increasing order) and an rSquared value (indicating the total variance explained by the model).")
   (as
     :accessor as
     :initarg :as
     :type (or (vector string *) list)
     :documentation "The output field names for the smoothed points generated by the regression transform.")))


(defun make-regression (&rest initargs &key &allow-other-keys)
  (apply #'make-instance 'regression initargs))
